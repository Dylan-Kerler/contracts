{
  "address": "0x98f4A2dBc8986D5692E3FEcaa0fc83a78E37da2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20Mintable",
          "name": "goldTokenContract_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expeditions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "seed",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxValue",
          "type": "uint256"
        }
      ],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSailingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getShipInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "expedition",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "length",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "speed",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Ships.Path[]",
              "name": "route",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Ships.Ship",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdToAttributes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "name",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "expedition",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "length",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "speed",
              "type": "uint32"
            }
          ],
          "internalType": "struct Ships.Attributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getUnharvestedTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "resourceTokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ships.TokenHarvest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goldTokenContract",
      "outputs": [
        {
          "internalType": "contract ERC20Mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Mintable",
          "name": "resourceTokenAddress",
          "type": "address"
        }
      ],
      "name": "harvestSingleToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helperContract",
      "outputs": [
        {
          "internalType": "contract ShipsHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lengthMultipliers",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "names",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "name",
          "type": "uint8"
        }
      ],
      "name": "purchaseShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ShipsHelper",
          "name": "helperContract_",
          "type": "address"
        }
      ],
      "name": "setHelperContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "speedMultipliers",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToAttributes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "name",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "expedition",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "length",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "speed",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToLastRouteUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToLastSetlHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ships.Path[]",
          "name": "route",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "updateRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eef8b3b071909130b7fb33326c4a0b30ce2671f7046edb850345b819539ace5",
  "receipt": {
    "to": null,
    "from": "0x63D98b0AAA1282f58670a6b02a88a19220dC3c67",
    "contractAddress": "0x98f4A2dBc8986D5692E3FEcaa0fc83a78E37da2E",
    "transactionIndex": 3,
    "gasUsed": "3530176",
    "logsBloom": "0x
    "blockHash": "0xd6382b304327e866af95a4cd9718dce008a37904700c63a331f5ed5c8329b2f5",
    "transactionHash": "0x5eef8b3b071909130b7fb33326c4a0b30ce2671f7046edb850345b819539ace5",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9268961,
        "transactionHash": "0x5eef8b3b071909130b7fb33326c4a0b30ce2671f7046edb850345b819539ace5",
        "address": "0x98f4A2dBc8986D5692E3FEcaa0fc83a78E37da2E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000063d98b0aaa1282f58670a6b02a88a19220dc3c67"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd6382b304327e866af95a4cd9718dce008a37904700c63a331f5ed5c8329b2f5"
      }
    ],
    "blockNumber": 9268961,
    "cumulativeGasUsed": "3938474",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5DF4a4892D327F3d704a727e1130280739c447Ce"
  ],
  "solcInputHash": "16bb3c57c6c561d8aef3a61309089298",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"goldTokenContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expeditions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seed\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSailingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getShipInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"expedition\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"speed\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Ships.Path[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Ships.Ship\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdToAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"name\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"expedition\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"speed\",\"type\":\"uint32\"}],\"internalType\":\"struct Ships.Attributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnharvestedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"resourceTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Ships.TokenHarvest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldTokenContract\",\"outputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Mintable\",\"name\":\"resourceTokenAddress\",\"type\":\"address\"}],\"name\":\"harvestSingleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helperContract\",\"outputs\":[{\"internalType\":\"contract ShipsHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lengthMultipliers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"name\",\"type\":\"uint8\"}],\"name\":\"purchaseShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ShipsHelper\",\"name\":\"helperContract_\",\"type\":\"address\"}],\"name\":\"setHelperContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speedMultipliers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAttributes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"name\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"expedition\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"speed\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToLastRouteUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToLastSetlHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Ships.Path[]\",\"name\":\"route\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getShipInfo(uint256)\":{\"notice\":\"Getters \"},\"mint(uint256)\":{\"notice\":\"State modifications \"},\"setHelperContract(address)\":{\"notice\":\"Setters \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ships.sol\":\"Ships\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x69deebfab9cc89f977376a17d50e918c854ad2092c2683e1049b498273e5ff0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./SettlementsV2.sol\\\";\\n\\ncontract ERC20Mintable is ERC20Burnable, Ownable {\\n    mapping(address => bool) public approvedMinters;\\n    SettlementsV2 settlements;\\n    uint256 public totalMinters = 0;\\n    bool public canToggleMints = true;\\n\\n    modifier onlyMinter() {\\n        require(approvedMinters[msg.sender] == true, \\\"Not an approved minter\\\");\\n        _;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC20(name_, symbol_)\\n    {\\n        approvedMinters[msg.sender] = true;\\n    }\\n\\n    function setSettlementsAddress(SettlementsV2 _settlements)\\n        public\\n        onlyOwner\\n    {\\n        settlements = _settlements;\\n    }\\n\\n    function turnOffMintGovernance() public onlyOwner {\\n        canToggleMints = false;\\n    }\\n\\n    function addMinter(address minter) public onlyOwner {\\n        require(canToggleMints, \\\"Minting turned off\\\");\\n        totalMinters += 1;\\n        approvedMinters[minter] = true;\\n    }\\n\\n    function removeMinter(address minter) public onlyOwner {\\n        require(canToggleMints, \\\"Minting turned off\\\");\\n        approvedMinters[minter] = false;\\n        totalMinters -= 1;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyMinter {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8d77516e8de53ff4e568f30a80ed8671d3511113d56ab1c9696c81b40f6d2ccc\",\"license\":\"MIT\"},\"contracts/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./SettlementsV2.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Helpers is Ownable {\\n    function _makeLegacyParts(\\n        string memory size,\\n        string memory spirit,\\n        string memory age,\\n        string memory resource,\\n        string memory morale,\\n        string memory government,\\n        string memory realm\\n    ) public pure returns (string[18] memory) {\\n        string[18] memory parts;\\n\\n        parts[\\n            0\\n        ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.txt { fill: black; font-family: monospace; font-size: 12px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"white\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"txt\\\">';\\n        parts[1] = size;\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"txt\\\">';\\n        parts[3] = spirit;\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"txt\\\">';\\n        parts[5] = age;\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"txt\\\">';\\n        parts[7] = resource;\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"txt\\\">';\\n        parts[9] = morale;\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"txt\\\">';\\n        parts[11] = government;\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"txt\\\">';\\n        parts[13] = realm;\\n        parts[14] = \\\"</text></svg>\\\";\\n        return parts;\\n    }\\n\\n    function _makeLegacyAttributeParts(string[18] memory parts)\\n        public\\n        pure\\n        returns (string[18] memory)\\n    {\\n        string[18] memory attrParts;\\n        attrParts[0] = '[{ \\\"trait_type\\\": \\\"Size\\\", \\\"value\\\": \\\"';\\n        attrParts[1] = parts[1];\\n        attrParts[2] = '\\\" }, { \\\"trait_type\\\": \\\"Spirit\\\", \\\"value\\\": \\\"';\\n        attrParts[3] = parts[3];\\n        attrParts[4] = '\\\" }, { \\\"trait_type\\\": \\\"Age\\\", \\\"value\\\": \\\"';\\n        attrParts[5] = parts[5];\\n        attrParts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Resource\\\", \\\"value\\\": \\\"';\\n        attrParts[7] = parts[7];\\n        attrParts[8] = '\\\" }, { \\\"trait_type\\\": \\\"Morale\\\", \\\"value\\\": \\\"';\\n        attrParts[9] = parts[9];\\n        attrParts[10] = '\\\" }, { \\\"trait_type\\\": \\\"Government\\\", \\\"value\\\": \\\"';\\n        attrParts[11] = parts[11];\\n        attrParts[12] = '\\\" }, { \\\"trait_type\\\": \\\"Realm\\\", \\\"value\\\": \\\"';\\n        attrParts[13] = parts[13];\\n        attrParts[14] = '\\\" }]';\\n        return attrParts;\\n    }\\n\\n    function _makeParts(\\n        string memory size,\\n        string memory spirit,\\n        string memory age,\\n        string memory resource,\\n        string memory morale,\\n        string memory government,\\n        string memory realm,\\n        uint256 unharvestedTokenAmount,\\n        string memory tokenSymbol\\n    ) public pure returns (string[18] memory) {\\n        string[18] memory parts;\\n        parts[\\n            0\\n        ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.txt { fill: black; font-family: monospace; font-size: 12px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"white\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"txt\\\">';\\n        parts[1] = size;\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"txt\\\">';\\n        parts[3] = spirit;\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"txt\\\">';\\n        parts[5] = age;\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"txt\\\">';\\n        parts[7] = resource;\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"txt\\\">';\\n        parts[9] = morale;\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"txt\\\">';\\n        parts[11] = government;\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"txt\\\">';\\n        parts[13] = realm;\\n        parts[14] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"txt\\\">';\\n        parts[15] = \\\"------------\\\";\\n        parts[16] = '</text><text x=\\\"10\\\" y=\\\"180\\\" class=\\\"txt\\\">';\\n        parts[17] = string(\\n            abi.encodePacked(\\n                \\\"$\\\",\\n                tokenSymbol,\\n                \\\": \\\",\\n                Strings.toString(unharvestedTokenAmount / 10**18),\\n                \\\"</text></svg>\\\"\\n            )\\n        );\\n\\n        return parts;\\n    }\\n\\n    function _makeAttributeParts(\\n        string memory size,\\n        string memory spirit,\\n        string memory age,\\n        string memory resource,\\n        string memory morale,\\n        string memory government,\\n        string memory realm,\\n        uint256 unharvestedTokenAmount,\\n        string memory tokenSymbol\\n    ) public pure returns (string[18] memory) {\\n        string[18] memory attrParts;\\n        attrParts[0] = '[{ \\\"trait_type\\\": \\\"Size\\\", \\\"value\\\": \\\"';\\n        attrParts[1] = size;\\n        attrParts[2] = '\\\" }, { \\\"trait_type\\\": \\\"Spirit\\\", \\\"value\\\": \\\"';\\n        attrParts[3] = spirit;\\n        attrParts[4] = '\\\" }, { \\\"trait_type\\\": \\\"Age\\\", \\\"value\\\": \\\"';\\n        attrParts[5] = age;\\n        attrParts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Resource\\\", \\\"value\\\": \\\"';\\n        attrParts[7] = resource;\\n        attrParts[8] = '\\\" }, { \\\"trait_type\\\": \\\"Morale\\\", \\\"value\\\": \\\"';\\n        attrParts[9] = morale;\\n        attrParts[10] = '\\\" }, { \\\"trait_type\\\": \\\"Government\\\", \\\"value\\\": \\\"';\\n        attrParts[11] = government;\\n        attrParts[12] = '\\\" }, { \\\"trait_type\\\": \\\"Realm\\\", \\\"value\\\": \\\"';\\n        attrParts[13] = realm;\\n        attrParts[14] = '\\\" }, { \\\"display_type\\\": \\\"number\\\",  \\\"trait_type\\\": ';\\n        attrParts[15] = string(abi.encodePacked('\\\"$', tokenSymbol, '\\\", \\\"value\\\": '));\\n        attrParts[16] = string(abi.encodePacked(Strings.toString(unharvestedTokenAmount / 10**18)));\\n        attrParts[17] = \\\" }]\\\";\\n        return attrParts;\\n    }\\n\\n    struct TokenURIInput {\\n        string size;\\n        string spirit;\\n        string age;\\n        string resource;\\n        string morale;\\n        string government;\\n        string realm;\\n    }\\n\\n    function tokenURI(\\n        TokenURIInput memory tokenURIInput,\\n        uint256 unharvestedTokenAmount,\\n        string memory tokenSymbol,\\n        bool useLegacy,\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        string[18] memory parts;\\n        string[18] memory attributesParts;\\n\\n        if (useLegacy) {\\n            parts = _makeLegacyParts(\\n                tokenURIInput.size,\\n                tokenURIInput.spirit,\\n                tokenURIInput.age,\\n                tokenURIInput.resource,\\n                tokenURIInput.morale,\\n                tokenURIInput.government,\\n                tokenURIInput.realm\\n            );\\n\\n            attributesParts = _makeLegacyAttributeParts(\\n                _makeLegacyParts(\\n                    tokenURIInput.size,\\n                    tokenURIInput.spirit,\\n                    tokenURIInput.age,\\n                    tokenURIInput.resource,\\n                    tokenURIInput.morale,\\n                    tokenURIInput.government,\\n                    tokenURIInput.realm\\n                )\\n            );\\n        } else {\\n            parts = _makeParts(\\n                tokenURIInput.size,\\n                tokenURIInput.spirit,\\n                tokenURIInput.age,\\n                tokenURIInput.resource,\\n                tokenURIInput.morale,\\n                tokenURIInput.government,\\n                tokenURIInput.realm,\\n                unharvestedTokenAmount,\\n                tokenSymbol\\n            );\\n\\n            attributesParts = _makeAttributeParts(\\n                tokenURIInput.size,\\n                tokenURIInput.spirit,\\n                tokenURIInput.age,\\n                tokenURIInput.resource,\\n                tokenURIInput.morale,\\n                tokenURIInput.government,\\n                tokenURIInput.realm,\\n                unharvestedTokenAmount,\\n                tokenSymbol\\n            );\\n        }\\n\\n        string memory output = string(\\n            abi.encodePacked(\\n                parts[0],\\n                parts[1],\\n                parts[2],\\n                parts[3],\\n                parts[4],\\n                parts[5],\\n                parts[6],\\n                parts[7],\\n                parts[8]\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                parts[9],\\n                parts[10],\\n                parts[11],\\n                parts[12],\\n                parts[13],\\n                parts[14],\\n                parts[15],\\n                parts[16]\\n            )\\n        );\\n        output = string(abi.encodePacked(output, parts[17]));\\n\\n        string memory atrrOutput = string(\\n            abi.encodePacked(\\n                attributesParts[0],\\n                attributesParts[1],\\n                attributesParts[2],\\n                attributesParts[3],\\n                attributesParts[4],\\n                attributesParts[5],\\n                attributesParts[6],\\n                attributesParts[7],\\n                attributesParts[8]\\n            )\\n        );\\n        atrrOutput = string(\\n            abi.encodePacked(\\n                atrrOutput,\\n                attributesParts[9],\\n                attributesParts[10],\\n                attributesParts[11],\\n                attributesParts[12],\\n                attributesParts[13],\\n                attributesParts[14]\\n            )\\n        );\\n\\n        atrrOutput = string(\\n            abi.encodePacked(\\n                atrrOutput,\\n                attributesParts[15],\\n                attributesParts[16],\\n                attributesParts[17]\\n            )\\n        );\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Settlement #',\\n                        Strings.toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"Settlements are a turn based civilisation simulator stored entirely on chain, go forth and conquer.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(output)),\\n                        '\\\"',\\n                        ',\\\"attributes\\\":',\\n                        atrrOutput,\\n                        \\\"}\\\"\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    uint8[] public civMultipliers;\\n    uint8[] public realmMultipliers;\\n    uint8[] public moralMultipliers;\\n\\n    uint256 constant ONE = 10**18;\\n\\n    function setMultipliers(\\n        uint8[] memory civMultipliers_,\\n        uint8[] memory realmMultipliers_,\\n        uint8[] memory moralMultipliers_\\n    ) public onlyOwner {\\n        civMultipliers = civMultipliers_;\\n        realmMultipliers = realmMultipliers_;\\n        moralMultipliers = moralMultipliers_;\\n    }\\n\\n    function getUnharvestedTokens(uint256 tokenId, SettlementsV2.Attributes memory attributes)\\n        public\\n        view\\n        returns (ERC20Mintable, uint256)\\n    {\\n        SettlementsV2 caller = SettlementsV2(msg.sender);\\n\\n        uint256 lastHarvest = caller.tokenIdToLastHarvest(tokenId);\\n        uint256 blockDelta = block.number - lastHarvest;\\n\\n        ERC20Mintable tokenAddress = caller.resourceTokenAddresses(attributes.resource);\\n\\n        if (blockDelta == 0 || lastHarvest == 0) {\\n            return (tokenAddress, 0);\\n        }\\n\\n        uint256 realmMultiplier = realmMultipliers[attributes.turns];\\n        uint256 civMultiplier = civMultipliers[attributes.size];\\n        uint256 moralMultiplier = moralMultipliers[attributes.morale];\\n        uint256 tokensToMint = (civMultiplier *\\n            blockDelta *\\n            moralMultiplier *\\n            ONE *\\n            realmMultiplier) / 300;\\n\\n        return (tokenAddress, tokensToMint);\\n    }\\n}\\n\",\"keccak256\":\"0x61670f93486d27c6e0f3968ca9d88774ce1dba6f51e355a9a66062d54d681f17\",\"license\":\"MIT\"},\"contracts/Islands.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./IslandsHelper.sol\\\";\\n\\n// The islands\\n// Travel to diff islands and harvest shit.\\n// @author 1929\\n\\ncontract Islands is ERC721, ERC721Enumerable, Ownable {\\n    struct Attributes {\\n        uint8 resource;\\n        uint8 climate;\\n        uint8 terrain;\\n        uint8 taxRate;\\n        uint32 area;\\n        uint32 population;\\n    }\\n\\n    struct Island {\\n        uint256 tokenId;\\n        ERC20Mintable resourceTokenContract;\\n        string resource;\\n        string climate;\\n        string terrain;\\n        uint32 area;\\n        uint32 maxPopulation;\\n        uint32 population;\\n        uint8 taxRate;\\n    }\\n\\n    string[] public resources = [\\\"Fish\\\", \\\"Wood\\\", \\\"Iron\\\", \\\"Silver\\\", \\\"Pearl\\\", \\\"Oil\\\", \\\"Diamond\\\"];\\n    string[] public climates = [\\\"Temperate\\\", \\\"Rainy\\\", \\\"Humid\\\", \\\"Arid\\\", \\\"Tropical\\\", \\\"Icy\\\"];\\n    string[] public terrains = [\\\"Flatlands\\\", \\\"Hilly\\\", \\\"Canyons\\\", \\\"Mountainous\\\"];\\n\\n    ERC20Mintable[] public resourcesToTokenContracts;\\n\\n    uint256 constant MAX_AREA = 5_000;\\n    uint32 constant MAX_POPULATION_PER_SQ_MI = 2_000;\\n\\n    IslandsHelper public helperContract;\\n\\n    mapping(uint256 => Attributes) public tokenIdToAttributes;\\n    mapping(uint256 => uint256) public tokenIdToLastHarvest;\\n\\n    // For future use so that expansion packs can increase/decrease the population\\n    // Idk what this could be used for... but probably something cool\\n    mapping(address => bool) public populationEditors;\\n\\n    modifier onlyPopulationEditor() {\\n        require(\\n            populationEditors[msg.sender] == true,\\n            \\\"You don't have permission to edit the population\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        ERC20Mintable fishToken,\\n        ERC20Mintable woodToken,\\n        ERC20Mintable ironToken,\\n        ERC20Mintable silverToken,\\n        ERC20Mintable pearlToken,\\n        ERC20Mintable oilToken,\\n        ERC20Mintable diamondToken\\n    ) ERC721(\\\"Islands\\\", \\\"ILND\\\") {\\n        resourcesToTokenContracts = [\\n            fishToken,\\n            woodToken,\\n            ironToken,\\n            silverToken,\\n            pearlToken,\\n            oilToken,\\n            diamondToken\\n        ];\\n    }\\n\\n    /** Setters */\\n    function addPopulationEditor(address newPopulationEditor) public onlyOwner {\\n        populationEditors[newPopulationEditor] = true;\\n    }\\n\\n    function removePopulationEditor(address newPopulationEditor) public onlyOwner {\\n        populationEditors[newPopulationEditor] = false;\\n    }\\n\\n    function setHelperContract(IslandsHelper helperContract_) public onlyOwner {\\n        helperContract = helperContract_;\\n    }\\n\\n    function setPopulation(uint256 tokenId, uint32 population) public onlyPopulationEditor {\\n        require(population <= getIslandInfo(tokenId).maxPopulation, \\\"Population is over max\\\");\\n        tokenIdToAttributes[tokenId].population = population;\\n    }\\n\\n    /** Getters */\\n    function getTaxIncome(uint256 tokenId) public view returns (ERC20Mintable, uint256) {\\n        return helperContract.getTaxIncome(tokenId);\\n    }\\n\\n    function getRandomNumber(bytes memory seed, uint256 maxValue) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(seed))) % maxValue;\\n    }\\n\\n    function getTokenIdToAttributes(uint256 tokenId) public view returns (Attributes memory) {\\n        return tokenIdToAttributes[tokenId];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        return helperContract.tokenURI(tokenId);\\n    }\\n\\n    function getPopulationPerSqMi(uint256 tokenId) public pure returns (uint32) {\\n        return uint32(getRandomNumber(abi.encode(tokenId), MAX_POPULATION_PER_SQ_MI)) + 1;\\n    }\\n\\n    function getIslandInfo(uint256 tokenId) public view returns (Island memory) {\\n        require(_exists(tokenId), \\\"Island with that tokenId doesn't exist\\\");\\n\\n        Attributes memory attr = tokenIdToAttributes[tokenId];\\n\\n        uint32 populationPerSqMi = getPopulationPerSqMi(tokenId);\\n        uint32 maxPopulation = populationPerSqMi * attr.area;\\n\\n        return\\n            Island({\\n                tokenId: tokenId,\\n                resource: resources[attr.resource],\\n                resourceTokenContract: resourcesToTokenContracts[attr.resource],\\n                climate: climates[attr.climate],\\n                terrain: terrains[attr.terrain],\\n                area: attr.area,\\n                maxPopulation: maxPopulation,\\n                population: attr.population,\\n                taxRate: attr.taxRate\\n            });\\n    }\\n\\n    /** State modifications */\\n    function mint(uint256 tokenId) public {\\n        require(!_exists(tokenId), \\\"Island with that id already exists\\\");\\n        require(\\n            (tokenId <= 9900) || (tokenId <= 10_000 && tokenId > 9900 && msg.sender == owner()),\\n            \\\"Island id is invalid\\\"\\n        );\\n\\n        Attributes memory attr;\\n\\n        uint256 value = getRandomNumber(abi.encode(tokenId, \\\"r\\\", block.timestamp), 1000);\\n        attr.resource = uint8(value < 700 ? value % 3 : value % 7);\\n\\n        value = getRandomNumber(abi.encode(tokenId, \\\"c\\\", block.timestamp), 1000);\\n        attr.climate = uint8(value % 6);\\n\\n        value = getRandomNumber(abi.encode(tokenId, \\\"t\\\", block.timestamp), 1000);\\n        attr.terrain = uint8(value % 4);\\n\\n        value = getRandomNumber(abi.encode(tokenId, \\\"ta\\\", block.timestamp), 1000);\\n        attr.taxRate = uint8(value % 50) + 1;\\n\\n        attr.area =\\n            uint32(getRandomNumber(abi.encode(tokenId, \\\"a\\\", block.timestamp), MAX_AREA)) +\\n            1;\\n\\n        uint32 populationPerSqMi = getPopulationPerSqMi(tokenId);\\n        uint32 maxPopulation = populationPerSqMi * attr.area;\\n        attr.population =\\n            (uint32(maxPopulation * getRandomNumber(abi.encode(tokenId), 100)) / 100) +\\n            10;\\n\\n        tokenIdToAttributes[tokenId] = attr;\\n        tokenIdToLastHarvest[tokenId] = block.number;\\n\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function harvest(uint256 tokenId) public {\\n        (ERC20Mintable resourceTokenContract, uint256 taxIncome) = helperContract.getTaxIncome(\\n            tokenId\\n        );\\n\\n        resourceTokenContract.mint(ownerOf(tokenId), taxIncome);\\n    }\\n\\n    /** Library overrides */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7cfaa6bd8244dfa92fa1888b52daad75723355ed6b555423a29c9d62a225d00\",\"license\":\"MIT\"},\"contracts/IslandsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Islands.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\ncontract IslandsHelper is Ownable {\\n    uint256 constant ONE = 10**18;\\n\\n    Islands public islandContract;\\n\\n    uint8[] public climateMultipliers;\\n    uint8[] public terrainMultipliers;\\n\\n    function setIslandsContract(Islands islandContract_) public onlyOwner {\\n        islandContract = islandContract_;\\n    }\\n\\n    function setMultipliers(uint8[] memory climateMultipliers_, uint8[] memory terrainMultipliers_)\\n        public\\n        onlyOwner\\n    {\\n        climateMultipliers = climateMultipliers_;\\n        terrainMultipliers = terrainMultipliers_;\\n    }\\n\\n    function getImageOutput(Islands.Island memory islandInfo) public view returns (string memory) {\\n        string memory imageOutput = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.txt { fill: black; font-family: monospace; font-size: 12px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"white\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"txt\\\">',\\n                islandInfo.climate,\\n                '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"txt\\\">',\\n                islandInfo.terrain,\\n                '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"txt\\\">',\\n                islandInfo.resource,\\n                '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"txt\\\">',\\n                string(abi.encodePacked(Strings.toString(islandInfo.area), \\\" sq mi\\\")),\\n                '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"txt\\\">'\\n            )\\n        );\\n\\n        (ERC20Mintable resourceTokenContract, uint256 taxIncome) = getTaxIncome(islandInfo.tokenId);\\n\\n        imageOutput = string(\\n            abi.encodePacked(\\n                imageOutput,\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Pop. \\\",\\n                        Strings.toString(islandInfo.population),\\n                        \\\"/\\\",\\n                        Strings.toString(islandInfo.maxPopulation)\\n                    )\\n                ),\\n                '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"txt\\\">',\\n                \\\"------------\\\",\\n                '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"txt\\\">',\\n                string(abi.encodePacked(\\\"Tax Rate: \\\", Strings.toString(islandInfo.taxRate), \\\"%\\\")),\\n                '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"txt\\\">',\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Tax Income: \\\",\\n                        Strings.toString(taxIncome / 10**18),\\n                        \\\" $\\\",\\n                        resourceTokenContract.symbol()\\n                    )\\n                ),\\n                '</text><text x=\\\"10\\\" y=\\\"180\\\" class=\\\"txt\\\">',\\n                \\\"</text></svg>\\\"\\n            )\\n        );\\n\\n        return imageOutput;\\n    }\\n\\n    function getAttrOutput(Islands.Island memory islandInfo) public view returns (string memory) {\\n        (ERC20Mintable __, uint256 taxIncome) = getTaxIncome(islandInfo.tokenId);\\n\\n        string memory attrOutput = string(\\n            abi.encodePacked(\\n                '[{ \\\"trait_type\\\": \\\"Climate\\\", \\\"value\\\": \\\"',\\n                islandInfo.climate,\\n                '\\\" }, { \\\"trait_type\\\": \\\"Terain\\\", \\\"value\\\": \\\"',\\n                islandInfo.terrain,\\n                '\\\" }, { \\\"trait_type\\\": \\\"Resource\\\", \\\"value\\\": \\\"',\\n                islandInfo.resource,\\n                '\\\" }, { \\\"trait_type\\\": \\\"Area (sq mi)\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(islandInfo.area),\\n                ' }, { \\\"trait_type\\\": \\\"Population\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(islandInfo.population),\\n                ' }, { \\\"trait_type\\\": \\\"Tax Rate\\\", \\\"display_type\\\": \\\"boost_percentage\\\", \\\"value\\\": ',\\n                Strings.toString(islandInfo.taxRate)\\n            )\\n        );\\n\\n        attrOutput = string(\\n            abi.encodePacked(\\n                attrOutput,\\n                ' }, { \\\"trait_type\\\": \\\"Max Population\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(islandInfo.maxPopulation),\\n                ' }, { \\\"trait_type\\\": \\\"Tax Income\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(taxIncome / 10**18),\\n                \\\" }]\\\"\\n            )\\n        );\\n\\n        return attrOutput;\\n    }\\n\\n    function getTaxIncome(uint256 tokenId) public view returns (ERC20Mintable, uint256) {\\n        Islands.Attributes memory islandInfo = islandContract.getTokenIdToAttributes(tokenId);\\n        ERC20Mintable resourceTokenContract = islandContract.resourcesToTokenContracts(\\n            islandInfo.resource\\n        );\\n\\n        uint256 lastHarvest = islandContract.tokenIdToLastHarvest(tokenId);\\n        uint256 blockDelta = block.number - lastHarvest;\\n\\n        uint256 tokenAmount = (blockDelta *\\n            climateMultipliers[islandInfo.climate] *\\n            terrainMultipliers[islandInfo.terrain] *\\n            islandInfo.taxRate *\\n            islandInfo.population *\\n            ONE) / 5_000_000_000;\\n\\n        return (resourceTokenContract, tokenAmount);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        Islands.Island memory islandInfo = islandContract.getIslandInfo(tokenId);\\n\\n        string memory imageOutput = getImageOutput(islandInfo);\\n        string memory attrOutput = getAttrOutput(islandInfo);\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Island #',\\n                        Strings.toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"Islands can be discovered and harvested for their resources. All data is onchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(imageOutput)),\\n                        '\\\", \\\"attributes\\\": ',\\n                        attrOutput,\\n                        \\\"}\\\"\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n}\\n\",\"keccak256\":\"0x3eef707fcacb726a6f20380d33f507d1a16930c874e5a0094757b30893b35e38\",\"license\":\"MIT\"},\"contracts/SettlementsLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\n//\\n//\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588      \\u2584\\u2588          \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2584\\u2584\\u2584\\u2584\\u2588\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584       \\u2588\\u2588\\u2588        \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//\\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588 \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584 \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584 \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588\\n//\\u2588\\u2588\\u2588    \\u2588\\u2580    \\u2588\\u2588\\u2588    \\u2588\\u2580     \\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588    \\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588 \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588    \\u2588\\u2580  \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2580  \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2580\\n//\\u2588\\u2588\\u2588         \\u2584\\u2588\\u2588\\u2588\\u2584\\u2584\\u2584         \\u2588\\u2588\\u2588   \\u2580     \\u2588\\u2588\\u2588   \\u2580 \\u2588\\u2588\\u2588        \\u2584\\u2588\\u2588\\u2588\\u2584\\u2584\\u2584     \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588  \\u2584\\u2588\\u2588\\u2588\\u2584\\u2584\\u2584     \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588   \\u2580   \\u2588\\u2588\\u2588\\n//\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\u2580\\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580         \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588       \\u2580\\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580     \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588 \\u2580\\u2580\\u2588\\u2588\\u2588\\u2580\\u2580\\u2580     \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588     \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2584      \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588    \\u2588\\u2584  \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2584  \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588              \\u2588\\u2588\\u2588\\n//\\u2584\\u2588    \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588         \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588\\u258c    \\u2584   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588    \\u2588\\u2588\\u2588 \\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588     \\u2588\\u2588\\u2588        \\u2584\\u2588    \\u2588\\u2588\\u2588\\n//\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2580      \\u2584\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\u2584\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2580\\u2588   \\u2588\\u2588\\u2588   \\u2588\\u2580    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2580\\u2588   \\u2588\\u2580     \\u2584\\u2588\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\n//\\u2580\\n\\n// @author zeth\\n\\n// @notice This contract is heavily inspired by Dom Hofmann's Loot Project with game design from Sid Meirs Civilisation, DND, Settlers of Catan & Age of Empires.\\n\\n// Settlements allows for the creation of settlements of which users have 5 turns to create their perfect civ.\\n// Randomise will pseduo randomly assign a settlement a new set of attributes & increase their turn count.\\n// An allocation of 100 settlements are reserved for owner & future expansion packs\\n\\ncontract SettlementsLegacy is\\n    ERC721,\\n    ERC721Enumerable,\\n    ReentrancyGuard,\\n    Ownable\\n{\\n    constructor() ERC721(\\\"Settlements\\\", \\\"STL\\\") {}\\n\\n    struct Attributes {\\n        uint8 size;\\n        uint8 spirit;\\n        uint8 age;\\n        uint8 resource;\\n        uint8 morale;\\n        uint8 government;\\n        uint8 turns;\\n    }\\n\\n    string[] private _sizes = [\\n        \\\"Camp\\\",\\n        \\\"Hamlet\\\",\\n        \\\"Village\\\",\\n        \\\"Town\\\",\\n        \\\"District\\\",\\n        \\\"Precinct\\\",\\n        \\\"Capitol\\\",\\n        \\\"State\\\"\\n    ];\\n    string[] private _spirits = [\\\"Earth\\\", \\\"Fire\\\", \\\"Water\\\", \\\"Air\\\", \\\"Astral\\\"];\\n    string[] private _ages = [\\n        \\\"Ancient\\\",\\n        \\\"Classical\\\",\\n        \\\"Medieval\\\",\\n        \\\"Renaissance\\\",\\n        \\\"Industrial\\\",\\n        \\\"Modern\\\",\\n        \\\"Information\\\",\\n        \\\"Future\\\"\\n    ];\\n    string[] private _resources = [\\n        \\\"Iron\\\",\\n        \\\"Gold\\\",\\n        \\\"Silver\\\",\\n        \\\"Wood\\\",\\n        \\\"Wool\\\",\\n        \\\"Water\\\",\\n        \\\"Grass\\\",\\n        \\\"Grain\\\"\\n    ];\\n    string[] private _morales = [\\n        \\\"Expectant\\\",\\n        \\\"Enlightened\\\",\\n        \\\"Dismissive\\\",\\n        \\\"Unhappy\\\",\\n        \\\"Happy\\\",\\n        \\\"Undecided\\\",\\n        \\\"Warring\\\",\\n        \\\"Scared\\\",\\n        \\\"Unruly\\\",\\n        \\\"Anarchist\\\"\\n    ];\\n    string[] private _governments = [\\n        \\\"Democracy\\\",\\n        \\\"Communism\\\",\\n        \\\"Socialism\\\",\\n        \\\"Oligarchy\\\",\\n        \\\"Aristocracy\\\",\\n        \\\"Monarchy\\\",\\n        \\\"Theocracy\\\",\\n        \\\"Colonialism\\\",\\n        \\\"Dictatorship\\\"\\n    ];\\n    string[] private _realms = [\\n        \\\"Genesis\\\",\\n        \\\"Valhalla\\\",\\n        \\\"Keskella\\\",\\n        \\\"Shadow\\\",\\n        \\\"Plains\\\",\\n        \\\"Ends\\\"\\n    ];\\n\\n    mapping(uint256 => Attributes) private attrIndex;\\n\\n    function indexFor(string memory input, uint256 length)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encodePacked(input))) % length;\\n    }\\n\\n    function _getRandomSeed(uint256 tokenId, string memory seedFor)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    seedFor,\\n                    Strings.toString(tokenId),\\n                    block.timestamp,\\n                    block.difficulty\\n                )\\n            );\\n    }\\n\\n    function generateAttribute(string memory salt, string[] memory items)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        return uint8(indexFor(string(salt), items.length));\\n    }\\n\\n    function _makeParts(uint256 tokenId)\\n        internal\\n        view\\n        returns (string[15] memory)\\n    {\\n        string[15] memory parts;\\n        parts[\\n            0\\n        ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.txt { fill: black; font-family: monospace; font-size: 12px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"white\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"txt\\\">';\\n        parts[1] = _sizes[attrIndex[tokenId].size];\\n        parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"txt\\\">';\\n        parts[3] = _spirits[attrIndex[tokenId].spirit];\\n        parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"txt\\\">';\\n        parts[5] = _ages[attrIndex[tokenId].age];\\n        parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"txt\\\">';\\n        parts[7] = _resources[attrIndex[tokenId].resource];\\n        parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"txt\\\">';\\n        parts[9] = _morales[attrIndex[tokenId].morale];\\n        parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"txt\\\">';\\n        parts[11] = _governments[attrIndex[tokenId].government];\\n        parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"txt\\\">';\\n        parts[13] = _realms[attrIndex[tokenId].turns];\\n        parts[14] = \\\"</text></svg>\\\";\\n        return parts;\\n    }\\n\\n    function _makeAttributeParts(string[15] memory parts)\\n        internal\\n        pure\\n        returns (string[15] memory)\\n    {\\n        string[15] memory attrParts;\\n        attrParts[0] = '[{ \\\"trait_type\\\": \\\"Size\\\", \\\"value\\\": \\\"';\\n        attrParts[1] = parts[1];\\n        attrParts[2] = '\\\" }, { \\\"trait_type\\\": \\\"Spirit\\\", \\\"value\\\": \\\"';\\n        attrParts[3] = parts[3];\\n        attrParts[4] = '\\\" }, { \\\"trait_type\\\": \\\"Age\\\", \\\"value\\\": \\\"';\\n        attrParts[5] = parts[5];\\n        attrParts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Resource\\\", \\\"value\\\": \\\"';\\n        attrParts[7] = parts[7];\\n        attrParts[8] = '\\\" }, { \\\"trait_type\\\": \\\"Morale\\\", \\\"value\\\": \\\"';\\n        attrParts[9] = parts[9];\\n        attrParts[10] = '\\\" }, { \\\"trait_type\\\": \\\"Government\\\", \\\"value\\\": \\\"';\\n        attrParts[11] = parts[11];\\n        attrParts[12] = '\\\" }, { \\\"trait_type\\\": \\\"Realm\\\", \\\"value\\\": \\\"';\\n        attrParts[13] = parts[13];\\n        attrParts[14] = '\\\" }]';\\n        return attrParts;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n\\n        string[15] memory parts = _makeParts(tokenId);\\n        string[15] memory attributesParts = _makeAttributeParts(parts);\\n\\n        string memory output = string(\\n            abi.encodePacked(\\n                parts[0],\\n                parts[1],\\n                parts[2],\\n                parts[3],\\n                parts[4],\\n                parts[5],\\n                parts[6],\\n                parts[7],\\n                parts[8]\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                parts[9],\\n                parts[10],\\n                parts[11],\\n                parts[12],\\n                parts[13],\\n                parts[14]\\n            )\\n        );\\n\\n        string memory atrrOutput = string(\\n            abi.encodePacked(\\n                attributesParts[0],\\n                attributesParts[1],\\n                attributesParts[2],\\n                attributesParts[3],\\n                attributesParts[4],\\n                attributesParts[5],\\n                attributesParts[6],\\n                attributesParts[7],\\n                attributesParts[8]\\n            )\\n        );\\n        atrrOutput = string(\\n            abi.encodePacked(\\n                atrrOutput,\\n                attributesParts[9],\\n                attributesParts[10],\\n                attributesParts[11],\\n                attributesParts[12],\\n                attributesParts[13],\\n                attributesParts[14]\\n            )\\n        );\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Settlement #',\\n                        Strings.toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"Settlements are a turn based civilisation simulator stored entirely on chain, go forth and conquer.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(output)),\\n                        '\\\"',\\n                        ',\\\"attributes\\\":',\\n                        atrrOutput,\\n                        \\\"}\\\"\\n                    )\\n                )\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n\\n        return output;\\n    }\\n\\n    function randomiseAttributes(uint256 tokenId, uint8 turn) internal {\\n        attrIndex[tokenId].size = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"size\\\"),\\n            _sizes\\n        );\\n        attrIndex[tokenId].spirit = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"spirit\\\"),\\n            _spirits\\n        );\\n        attrIndex[tokenId].age = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"age\\\"),\\n            _ages\\n        );\\n        attrIndex[tokenId].resource = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"resource\\\"),\\n            _resources\\n        );\\n        attrIndex[tokenId].morale = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"morale\\\"),\\n            _morales\\n        );\\n        attrIndex[tokenId].government = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"government\\\"),\\n            _governments\\n        );\\n        attrIndex[tokenId].turns = turn;\\n    }\\n\\n    function randomise(uint256 tokenId) public nonReentrant {\\n        require(\\n            _exists(tokenId) &&\\n                msg.sender == ownerOf(tokenId) &&\\n                attrIndex[tokenId].turns < 5,\\n            \\\"Settlement turns over\\\"\\n        );\\n        randomiseAttributes(\\n            tokenId,\\n            uint8(SafeMath.add(attrIndex[tokenId].turns, 1))\\n        );\\n    }\\n\\n    function settle(uint256 tokenId) public nonReentrant {\\n        require(\\n            !_exists(tokenId) && tokenId > 0 && tokenId < 9901,\\n            \\\"Settlement id is invalid\\\"\\n        );\\n        randomiseAttributes(tokenId, 0);\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function settleForOwner(uint256 tokenId) public nonReentrant onlyOwner {\\n        require(\\n            !_exists(tokenId) && tokenId > 9900 && tokenId < 10001,\\n            \\\"Settlement id is invalid\\\"\\n        );\\n        randomiseAttributes(tokenId, 0);\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x256dc498cb5d0a9cdf77fafb6031ee30d9bc1b453a5773685efff511377f418b\",\"license\":\"MIT\"},\"contracts/SettlementsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SettlementsLegacy.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./Helper.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n// @author zeth and out.eth\\n// @notice This contract is heavily inspired by Dom Hofmann's Loot Project with game design from Sid Meirs Civilisation, DND, Settlers of Catan & Age of Empires.\\n\\n// Lands allows for the creation of lands of which users have 5 turns to create their perfect civ.\\n// Randomise will pseduo randomly assign a land a new set of attributes & increase their turn count.\\n// An allocation of 100 lands are reserved for owner & future expansion packs\\n\\ncontract SettlementsV2 is ERC721, ERC721Enumerable, Ownable {\\n    struct Attributes {\\n        uint8 size;\\n        uint8 spirit;\\n        uint8 age;\\n        uint8 resource;\\n        uint8 morale;\\n        uint8 government;\\n        uint8 turns;\\n    }\\n\\n    SettlementsLegacy public legacySettlements;\\n    Helpers public helpersContract;\\n\\n    ERC20Mintable[] public resourceTokenAddresses;\\n    mapping(uint256 => uint256) public tokenIdToLastHarvest;\\n    mapping(uint256 => Attributes) public attrIndex;\\n\\n    string[] public _sizes = [\\n        \\\"Camp\\\",\\n        \\\"Hamlet\\\",\\n        \\\"Village\\\",\\n        \\\"Town\\\",\\n        \\\"District\\\",\\n        \\\"Precinct\\\",\\n        \\\"Capitol\\\",\\n        \\\"State\\\"\\n    ];\\n    string[] public _spirits = [\\\"Earth\\\", \\\"Fire\\\", \\\"Water\\\", \\\"Air\\\", \\\"Astral\\\"];\\n    string[] public _ages = [\\n        \\\"Ancient\\\",\\n        \\\"Classical\\\",\\n        \\\"Medieval\\\",\\n        \\\"Renaissance\\\",\\n        \\\"Industrial\\\",\\n        \\\"Modern\\\",\\n        \\\"Information\\\",\\n        \\\"Future\\\"\\n    ];\\n    string[] public _resources = [\\n        \\\"Iron\\\",\\n        \\\"Gold\\\",\\n        \\\"Silver\\\",\\n        \\\"Wood\\\",\\n        \\\"Wool\\\",\\n        \\\"Water\\\",\\n        \\\"Grass\\\",\\n        \\\"Grain\\\"\\n    ];\\n    string[] public _morales = [\\n        \\\"Expectant\\\",\\n        \\\"Enlightened\\\",\\n        \\\"Dismissive\\\",\\n        \\\"Unhappy\\\",\\n        \\\"Happy\\\",\\n        \\\"Undecided\\\",\\n        \\\"Warring\\\",\\n        \\\"Scared\\\",\\n        \\\"Unruly\\\",\\n        \\\"Anarchist\\\"\\n    ];\\n    string[] public _governments = [\\n        \\\"Democracy\\\",\\n        \\\"Communism\\\",\\n        \\\"Socialism\\\",\\n        \\\"Oligarchy\\\",\\n        \\\"Aristocracy\\\",\\n        \\\"Monarchy\\\",\\n        \\\"Theocracy\\\",\\n        \\\"Colonialism\\\",\\n        \\\"Dictatorship\\\"\\n    ];\\n    string[] public _realms = [\\\"Genesis\\\", \\\"Valhalla\\\", \\\"Keskella\\\", \\\"Shadow\\\", \\\"Plains\\\", \\\"Ends\\\"];\\n\\n    constructor(\\n        SettlementsLegacy _legacyAddress,\\n        ERC20Mintable ironToken_,\\n        ERC20Mintable goldToken_,\\n        ERC20Mintable silverToken_,\\n        ERC20Mintable woodToken_,\\n        ERC20Mintable woolToken_,\\n        ERC20Mintable waterToken_,\\n        ERC20Mintable grassToken_,\\n        ERC20Mintable grainToken_\\n    ) ERC721(\\\"Settlements\\\", \\\"STL\\\") {\\n        legacySettlements = _legacyAddress;\\n        resourceTokenAddresses = [\\n            ironToken_,\\n            goldToken_,\\n            silverToken_,\\n            woodToken_,\\n            woolToken_,\\n            waterToken_,\\n            grassToken_,\\n            grainToken_\\n        ];\\n    }\\n\\n    function setHelpersContract(Helpers helpersContract_) public onlyOwner {\\n        helpersContract = helpersContract_;\\n    }\\n\\n    function indexFor(string memory input, uint256 length) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input))) % length;\\n    }\\n\\n    function _getRandomSeed(uint256 tokenId, string memory seedFor)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    seedFor,\\n                    Strings.toString(tokenId),\\n                    block.timestamp,\\n                    block.difficulty\\n                )\\n            );\\n    }\\n\\n    function generateAttribute(string memory salt, string[] memory items)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        return uint8(indexFor(string(salt), items.length));\\n    }\\n\\n    function _oldTokenURI(uint256 tokenId) private view returns (string memory) {\\n        return _tokenURI(tokenId, true);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        return _tokenURI(tokenId, false);\\n    }\\n\\n    function getUnharvestedTokens(uint256 tokenId) public view returns (ERC20Mintable, uint256) {\\n        Attributes memory attributes = attrIndex[tokenId];\\n        return helpersContract.getUnharvestedTokens(tokenId, attributes);\\n    }\\n\\n    function _tokenURI(uint256 tokenId, bool useLegacy) private view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n\\n        Helpers.TokenURIInput memory tokenURIInput;\\n\\n        tokenURIInput.size = _sizes[attrIndex[tokenId].size];\\n        tokenURIInput.spirit = _spirits[attrIndex[tokenId].spirit];\\n        tokenURIInput.age = _ages[attrIndex[tokenId].age];\\n        tokenURIInput.resource = _resources[attrIndex[tokenId].resource];\\n        tokenURIInput.morale = _morales[attrIndex[tokenId].morale];\\n        tokenURIInput.government = _governments[attrIndex[tokenId].government];\\n        tokenURIInput.realm = _realms[attrIndex[tokenId].turns];\\n\\n        ERC20Mintable tokenContract = resourceTokenAddresses[0];\\n        uint256 unharvestedTokenAmount = 0;\\n\\n        if (useLegacy == false) {\\n            Attributes memory attributes = attrIndex[tokenId];\\n            (tokenContract, unharvestedTokenAmount) = getUnharvestedTokens(tokenId);\\n        }\\n\\n        string memory output = helpersContract.tokenURI(\\n            tokenURIInput,\\n            unharvestedTokenAmount,\\n            tokenContract.symbol(),\\n            useLegacy,\\n            tokenId\\n        );\\n\\n        return output;\\n    }\\n\\n    function randomiseAttributes(uint256 tokenId, uint8 turn) internal {\\n        attrIndex[tokenId].size = generateAttribute(_getRandomSeed(tokenId, \\\"size\\\"), _sizes);\\n        attrIndex[tokenId].spirit = generateAttribute(_getRandomSeed(tokenId, \\\"spirit\\\"), _spirits);\\n        attrIndex[tokenId].age = generateAttribute(_getRandomSeed(tokenId, \\\"age\\\"), _ages);\\n        attrIndex[tokenId].resource = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"resource\\\"),\\n            _resources\\n        );\\n        attrIndex[tokenId].morale = generateAttribute(_getRandomSeed(tokenId, \\\"morale\\\"), _morales);\\n        attrIndex[tokenId].government = generateAttribute(\\n            _getRandomSeed(tokenId, \\\"government\\\"),\\n            _governments\\n        );\\n        attrIndex[tokenId].turns = turn;\\n    }\\n\\n    function randomise(uint256 tokenId) public {\\n        require(\\n            _exists(tokenId) && msg.sender == ownerOf(tokenId) && attrIndex[tokenId].turns < 5,\\n            \\\"Settlement turns over\\\"\\n        );\\n\\n        harvest(tokenId);\\n        randomiseAttributes(tokenId, attrIndex[tokenId].turns + 1);\\n    }\\n\\n    function harvest(uint256 tokenId) public {\\n        (ERC20Mintable tokenAddress, uint256 tokensToMint) = getUnharvestedTokens(tokenId);\\n\\n        tokenAddress.mint(ownerOf(tokenId), tokensToMint);\\n        tokenIdToLastHarvest[tokenId] = block.number;\\n    }\\n\\n    function multiClaim(uint256[] calldata tokenIds, Attributes[] memory tokenAttributes) public {\\n        for (uint256 i = 0; i < tokenAttributes.length; i++) {\\n            claim(tokenIds[i], tokenAttributes[i]);\\n        }\\n    }\\n\\n    function claim(uint256 tokenId, Attributes memory attributes) public {\\n        legacySettlements.transferFrom(msg.sender, address(this), tokenId);\\n        _safeMint(msg.sender, tokenId);\\n        attrIndex[tokenId] = attributes;\\n        bytes32 v2Uri = keccak256(abi.encodePacked(_oldTokenURI(tokenId)));\\n        bytes32 legacyURI = keccak256(abi.encodePacked(legacySettlements.tokenURI(tokenId)));\\n\\n        tokenIdToLastHarvest[tokenId] = block.number;\\n        require(v2Uri == legacyURI, \\\"Attributes don't match legacy contract\\\");\\n    }\\n\\n    function claimAndReroll(uint256 tokenId) public {\\n        legacySettlements.transferFrom(msg.sender, address(this), tokenId);\\n        randomiseAttributes(tokenId, 3);\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getSettlementSize(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _sizes[attrIndex[tokenId].size];\\n    }\\n\\n    function getSettlementSpirit(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _spirits[attrIndex[tokenId].spirit];\\n    }\\n\\n    function getSettlementAge(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _ages[attrIndex[tokenId].age];\\n    }\\n\\n    function getSettlementResource(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _resources[attrIndex[tokenId].resource];\\n    }\\n\\n    function getSettlementMorale(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _morales[attrIndex[tokenId].morale];\\n    }\\n\\n    function getSettlementGovernment(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _governments[attrIndex[tokenId].government];\\n    }\\n\\n    function getSettlementRealm(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"Settlement does not exist\\\");\\n        return _realms[attrIndex[tokenId].turns];\\n    }\\n}\\n\",\"keccak256\":\"0x94c7714c5c5df7d4ee3215a7f08b1df3ddfcac06de5c58ceeda806ea9a4683a3\",\"license\":\"MIT\"},\"contracts/Ships.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./ShipsHelper.sol\\\";\\n\\n// The ships\\n// **music**\\n// Sweet dreams are made of this\\n// Who am I to disagree\\n// I travel the world and the seven seas :pepe jamming:\\n// (fr tho, when r twitch emotes gunna be added to sol natspec standard... fukin boomers man)\\n// @author 1929\\n\\ncontract Ships is ERC721, ERC721Enumerable, Ownable {\\n    struct Attributes {\\n        uint8 name;\\n        uint8 expedition;\\n        uint32 length;\\n        uint32 speed;\\n    }\\n\\n    struct Path {\\n        address tokenContract;\\n        uint256 tokenId;\\n    }\\n\\n    struct Ship {\\n        uint256 tokenId;\\n        string name;\\n        string expedition;\\n        uint32 length;\\n        uint32 speed;\\n        Path[] route;\\n    }\\n\\n    struct TokenHarvest {\\n        address resourceTokenContract;\\n        uint256 amount;\\n    }\\n\\n    string[] public names = [\\\"Canoe\\\", \\\"Longship\\\", \\\"Clipper\\\", \\\"Galleon\\\", \\\"Man-of-war\\\"];\\n    string[] public expeditions = [\\\"Trader\\\", \\\"Explorer\\\", \\\"Pirate\\\", \\\"Military\\\", \\\"Diplomat\\\"];\\n\\n    uint32[] public speedMultipliers = [10, 15, 35, 25, 25];\\n    uint32[] public lengthMultipliers = [5, 10, 10, 30, 40];\\n\\n    ShipsHelper public helperContract;\\n    ERC20Mintable public goldTokenContract;\\n\\n    mapping(uint256 => Attributes) public tokenIdToAttributes;\\n    mapping(uint256 => Path[]) public tokenIdToRoute;\\n    mapping(uint256 => uint256) public tokenIdToLastRouteUpdate;\\n    mapping(uint256 => uint256) public tokenIdToLastSetlHarvest;\\n\\n    uint256 purchasedShipsCount = 3000;\\n\\n    constructor(ERC20Mintable goldTokenContract_) ERC721(\\\"Ships\\\", \\\"SHIP\\\") {\\n        goldTokenContract = goldTokenContract_;\\n    }\\n\\n    /** Setters */\\n    function setHelperContract(ShipsHelper helperContract_) public onlyOwner {\\n        helperContract = helperContract_;\\n    }\\n\\n    /** Getters */\\n    function getShipInfo(uint256 tokenId) public view returns (Ship memory) {\\n        require(_exists(tokenId), \\\"Ship with that tokenId doesn't exist\\\");\\n\\n        Attributes memory attr = tokenIdToAttributes[tokenId];\\n\\n        return\\n            Ship({\\n                tokenId: tokenId,\\n                name: names[attr.name],\\n                expedition: expeditions[attr.expedition],\\n                length: attr.length,\\n                speed: attr.speed,\\n                route: tokenIdToRoute[tokenId]\\n            });\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        return helperContract.tokenURI(tokenId);\\n    }\\n\\n    function getTokenIdToAttributes(uint256 tokenId) public view returns (Attributes memory) {\\n        return tokenIdToAttributes[tokenId];\\n    }\\n\\n    function getRandomNumber(bytes memory seed, uint256 maxValue) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(seed))) % maxValue;\\n    }\\n\\n    function getUnharvestedTokens(uint256 tokenId) public view returns (TokenHarvest[] memory) {\\n        return helperContract.getUnharvestedTokens(tokenId);\\n    }\\n\\n    function getSailingDuration(uint256 tokenId) public view returns (uint256) {\\n        Ship memory shipInfo = getShipInfo(tokenId);\\n        return helperContract.getSailingDuration(shipInfo);\\n    }\\n\\n    /** State modifications */\\n    function mint(uint256 tokenId) public {\\n        require(!_exists(tokenId), \\\"Ship with that id already exists\\\");\\n        require(tokenId <= 3000, \\\"Ship id is invalid\\\");\\n\\n        uint256 value = getRandomNumber(abi.encode(tokenId, \\\"n\\\", block.timestamp), 1000);\\n        uint8 name = uint8(value < 900 ? value % 3 : value < 950 ? value % 4 : value % 5);\\n\\n        _mintShip(name, tokenId);\\n    }\\n\\n    function harvest(uint256 tokenId) public {\\n        TokenHarvest[] memory unharvestedTokens = getUnharvestedTokens(tokenId);\\n        address taxDestination = helperContract.getTaxDestination(tokenId);\\n\\n        for (uint256 i = 0; i < unharvestedTokens.length; i++) {\\n            ERC20Mintable(unharvestedTokens[i].resourceTokenContract).mint(\\n                ownerOf(tokenId),\\n                unharvestedTokens[i].amount\\n            );\\n\\n            goldTokenContract.mint(taxDestination, unharvestedTokens[i].amount / 10);\\n            tokenIdToLastRouteUpdate[tokenId] = block.number;\\n        }\\n    }\\n\\n    function harvestSingleToken(uint256 tokenId, ERC20Mintable resourceTokenAddress) public {\\n        TokenHarvest[] memory unharvestedTokens = getUnharvestedTokens(tokenId);\\n        address taxDestination = helperContract.getTaxDestination(tokenId);\\n\\n        for (uint256 i = 0; i < unharvestedTokens.length; i++) {\\n            if (\\n                address(resourceTokenAddress) != address(unharvestedTokens[i].resourceTokenContract)\\n            ) {\\n                continue;\\n            }\\n\\n            ERC20Mintable(unharvestedTokens[i].resourceTokenContract).mint(\\n                ownerOf(tokenId),\\n                unharvestedTokens[i].amount\\n            );\\n\\n            // 6% tax to the originating settlement\\n            goldTokenContract.mint(taxDestination, (unharvestedTokens[i].amount * 6) / 100);\\n            tokenIdToLastRouteUpdate[tokenId] = block.number;\\n            return;\\n        }\\n    }\\n\\n    function updateRoute(Path[] memory route, uint256 tokenId) public {\\n        _updateRoute(route, tokenId, false);\\n    }\\n\\n    function _updateRoute(\\n        Path[] memory route,\\n        uint256 tokenId,\\n        bool init\\n    ) internal {\\n        require(helperContract.isValidRoute(route, tokenId, msg.sender, init), \\\"Invalid route\\\");\\n\\n        delete tokenIdToRoute[tokenId];\\n        for (uint256 i = 0; i < route.length; i++) {\\n            tokenIdToRoute[tokenId].push(route[i]);\\n        }\\n\\n        tokenIdToLastRouteUpdate[tokenId] = block.number;\\n    }\\n\\n    function purchaseShip(uint8 name) public {\\n        TokenHarvest[] memory cost = helperContract.getCost(name);\\n\\n        for (uint256 i = 0; i < cost.length; i++) {\\n            ERC20Mintable(cost[i].resourceTokenContract).burnFrom(msg.sender, cost[i].amount);\\n        }\\n\\n        purchasedShipsCount += 1;\\n        _mintShip(name, purchasedShipsCount);\\n    }\\n\\n    function _mintShip(uint8 name, uint256 tokenId) internal {\\n        Attributes memory attr;\\n\\n        attr.name = name;\\n\\n        uint256 value = getRandomNumber(abi.encode(tokenId, \\\"c\\\", block.timestamp), 1000);\\n        attr.expedition = uint8(value % 5);\\n\\n        value = getRandomNumber(abi.encode(tokenId, \\\"l\\\", block.timestamp), 50);\\n        attr.length = uint32((value + 1) * uint256(lengthMultipliers[attr.name])) / 10 + 2;\\n        attr.length = attr.length < 5 ? 5 : attr.length;\\n\\n        value = getRandomNumber(abi.encode(tokenId, \\\"s\\\", block.timestamp), 100);\\n        attr.speed = uint32((value + 1) * uint256(speedMultipliers[attr.name])) / 100 + 2;\\n        attr.speed = attr.speed < 5 ? 5 : attr.speed;\\n\\n        tokenIdToAttributes[tokenId] = attr;\\n\\n        _updateRoute(helperContract.getInitialRoute(tokenId, attr.name), tokenId, true);\\n        tokenIdToLastSetlHarvest[tokenId] = block.number;\\n        tokenIdToLastRouteUpdate[tokenId] = block.number;\\n\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    /** Library overrides */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x371864e31d7032b7b042cb3435f1d0455c946cd7900a6ad0811dc33a1fea2057\",\"license\":\"MIT\"},\"contracts/ShipsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./Ships.sol\\\";\\nimport \\\"./SettlementsV2.sol\\\";\\nimport \\\"./Islands.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ShipsHelper is Ownable {\\n    uint256 constant ONE = 10**18;\\n\\n    Ships public shipsContract;\\n\\n    uint256[] public nameToMaxRouteLength = [2, 3, 4, 5, 5];\\n    uint256[] public expeditionMultipliers = [3, 2, 2, 1, 1];\\n\\n    uint256[] public setlNameMultipliers = [1, 2, 2, 4, 4];\\n    uint256[] public setlExpeditionMultipliers = [1, 3, 1, 2, 2];\\n\\n    Ships.TokenHarvest[][] public nameToCost;\\n\\n    SettlementsV2 public settlementsContract;\\n    Islands public islandsContract;\\n\\n    ERC20Mintable public setlTokenAddress;\\n\\n    enum Status {\\n        Resting,\\n        Sailing,\\n        Harvesting\\n    }\\n\\n    constructor(ERC20Mintable setlTokenAddress_) {\\n        setlTokenAddress = setlTokenAddress_;\\n    }\\n\\n    /** Setters */\\n    function setShipsContract(Ships shipsContract_) public onlyOwner {\\n        shipsContract = shipsContract_;\\n    }\\n\\n    function setSettlementsContract(SettlementsV2 settlementsContract_) public onlyOwner {\\n        settlementsContract = settlementsContract_;\\n    }\\n\\n    function setIslandsContract(Islands islandsContract_) public onlyOwner {\\n        islandsContract = islandsContract_;\\n    }\\n\\n    function setCosts(Ships.TokenHarvest[][] memory costs) public onlyOwner {\\n        delete nameToCost;\\n\\n        for (uint256 i = 0; i < costs.length; i++) {\\n            nameToCost.push();\\n            for (uint256 s = 0; s < costs[i].length; s++) {\\n                nameToCost[i].push();\\n                nameToCost[i][s].resourceTokenContract = costs[i][s].resourceTokenContract;\\n                nameToCost[i][s].amount = costs[i][s].amount;\\n            }\\n        }\\n    }\\n\\n    /** Getters */\\n    // breh the level of modulo math in the next few functions is insane nocap\\n    function getStatus(uint256 tokenId) public view returns (Status) {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n\\n        uint256 lastRouteUpdate = shipsContract.tokenIdToLastRouteUpdate(tokenId);\\n        uint256 blockDelta = block.number - lastRouteUpdate;\\n\\n        uint256 sailingDuration = getSailingDuration(shipInfo);\\n        uint256 harvestDuration = 120;\\n\\n        uint256 progressIntoCurrentPath = blockDelta % (sailingDuration + harvestDuration);\\n        uint256 currentTargetIndex = getCurrentTargetIndex(tokenId);\\n        Status status = progressIntoCurrentPath >= sailingDuration\\n            ? currentTargetIndex == 0 ? Status.Resting : Status.Harvesting\\n            : Status.Sailing;\\n\\n        return status;\\n    }\\n\\n    function getCurrentTargetIndex(uint256 tokenId) public view returns (uint256) {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n\\n        uint256 lastRouteUpdate = shipsContract.tokenIdToLastRouteUpdate(tokenId);\\n        uint256 blockDelta = block.number - lastRouteUpdate;\\n\\n        uint256 sailingDuration = getSailingDuration(shipInfo);\\n        uint256 harvestDuration = 120;\\n\\n        uint256 singlePathDuration = sailingDuration + harvestDuration;\\n\\n        uint256 index = (blockDelta % (singlePathDuration * shipInfo.route.length)) /\\n            singlePathDuration;\\n        uint256 currentTargetIndex = (index + 1) % shipInfo.route.length;\\n\\n        return currentTargetIndex;\\n    }\\n\\n    function getCurrentTarget(uint256 tokenId) public view returns (Ships.Path memory) {\\n        uint256 currentTargetIndex = getCurrentTargetIndex(tokenId);\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n        return shipInfo.route[currentTargetIndex];\\n    }\\n\\n    function getSailingDuration(Ships.Ship memory shipInfo) public pure returns (uint256) {\\n        return (15 * 200) / shipInfo.speed;\\n    }\\n\\n    function getBlocksUntilNextPhase(uint256 tokenId) public view returns (uint256) {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n        uint256 lastRouteUpdate = shipsContract.tokenIdToLastRouteUpdate(tokenId);\\n        uint256 blockDelta = block.number - lastRouteUpdate;\\n\\n        uint256 sailingDuration = getSailingDuration(shipInfo);\\n        uint256 harvestDuration = 120;\\n\\n        uint256 singlePathDuration = sailingDuration + harvestDuration;\\n        uint256 progressIntoCurrentPath = blockDelta % singlePathDuration;\\n\\n        uint256 blocksUntilNextPhase = progressIntoCurrentPath < sailingDuration\\n            ? sailingDuration - progressIntoCurrentPath\\n            : singlePathDuration - progressIntoCurrentPath;\\n\\n        return blocksUntilNextPhase;\\n    }\\n\\n    function getUnharvestedTokens(uint256 tokenId)\\n        public\\n        view\\n        returns (Ships.TokenHarvest[] memory)\\n    {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n        Ships.Attributes memory shipAttr = shipsContract.getTokenIdToAttributes(tokenId);\\n\\n        uint256 lastRouteUpdate = shipsContract.tokenIdToLastRouteUpdate(tokenId);\\n        uint256 blockDelta = block.number - lastRouteUpdate;\\n\\n        uint256 sailingDuration = getSailingDuration(shipInfo);\\n        uint256 harvestDuration = 120;\\n        uint256 singlePathDuration = sailingDuration + harvestDuration;\\n        uint256 totalPathDuration = singlePathDuration * shipInfo.route.length;\\n\\n        Ships.TokenHarvest[] memory listOfTokensToHarvest = new Ships.TokenHarvest[](\\n            shipInfo.route.length - 1\\n        );\\n        uint256 tokensSeen = 0;\\n\\n        // why hasn't any of the eth big brains figured out how to do a hashmap in memory\\n        for (uint256 i = 1; i < shipInfo.route.length; i++) {\\n            // offset = totalPathDuration - singlePathDuration * i\\n            // amountOfTimesHarvestedTarget = (blockDelta + offset) / totalPathDuration\\n            uint256 tokensToHarvest = (((blockDelta +\\n                (totalPathDuration - singlePathDuration * i)) / totalPathDuration) *\\n                ONE *\\n                expeditionMultipliers[shipAttr.expedition]) / 300;\\n\\n            (ERC20Mintable resourceTokenContract, uint256 __) = islandsContract.getTaxIncome(\\n                shipInfo.route[i].tokenId\\n            );\\n\\n            uint256 index = shipInfo.route.length;\\n            for (uint256 s = 0; s < listOfTokensToHarvest.length; s++) {\\n                if (\\n                    listOfTokensToHarvest[s].resourceTokenContract == address(resourceTokenContract)\\n                ) {\\n                    index = s;\\n                }\\n            }\\n\\n            if (tokensToHarvest > 0) {\\n                if (index != shipInfo.route.length) {\\n                    listOfTokensToHarvest[index].amount += tokensToHarvest;\\n                } else {\\n                    listOfTokensToHarvest[tokensSeen].amount += tokensToHarvest;\\n                    listOfTokensToHarvest[tokensSeen].resourceTokenContract = address(\\n                        resourceTokenContract\\n                    );\\n                    tokensSeen += 1;\\n                }\\n            }\\n        }\\n\\n        Ships.TokenHarvest[] memory filteredListOfTokensToHarvest = new Ships.TokenHarvest[](\\n            tokensSeen + 1\\n        );\\n        for (uint256 i = 0; i < tokensSeen; i++) {\\n            filteredListOfTokensToHarvest[i] = listOfTokensToHarvest[i];\\n        }\\n\\n        filteredListOfTokensToHarvest[tokensSeen] = Ships.TokenHarvest({\\n            resourceTokenContract: address(setlTokenAddress),\\n            amount: getUnharvestedSettlementTokens(tokenId)\\n        });\\n\\n        return filteredListOfTokensToHarvest;\\n    }\\n\\n    function getUnharvestedSettlementTokens(uint256 tokenId) public view returns (uint256) {\\n        Ships.Attributes memory shipAttr = shipsContract.getTokenIdToAttributes(tokenId);\\n        uint256 lastSetlHarvest = shipsContract.tokenIdToLastRouteUpdate(tokenId);\\n        uint256 blockDelta = block.number - lastSetlHarvest;\\n\\n        // timeSinceLastSettleHarvest * expeditionMultiplier * shipMultiplier\\n        uint256 unharvestedSetlTokens = (setlExpeditionMultipliers[shipAttr.expedition] *\\n            setlNameMultipliers[shipAttr.name] *\\n            blockDelta *\\n            ONE) / 1000;\\n\\n        return unharvestedSetlTokens;\\n    }\\n\\n    function getTaxDestination(uint256 tokenId) public view returns (address) {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n        return settlementsContract.ownerOf(shipInfo.route[0].tokenId);\\n    }\\n\\n    function getInitialRoute(uint256 tokenId, uint8 name)\\n        public\\n        view\\n        returns (Ships.Path[] memory)\\n    {\\n        uint256 routeLength = nameToMaxRouteLength[name];\\n        Ships.Path[] memory routes = new Ships.Path[](routeLength);\\n\\n        uint256 settlementId = getRandomNumber(abi.encodePacked(\\\"s\\\", tokenId), 9_900);\\n        routes[0] = Ships.Path({\\n            tokenId: settlementId,\\n            tokenContract: address(settlementsContract)\\n        });\\n\\n        for (uint256 i = 1; i < routes.length; i++) {\\n            uint256 islandId = getRandomNumber(abi.encodePacked(i, tokenId), 10_000);\\n            routes[i] = Ships.Path({tokenId: islandId, tokenContract: address(islandsContract)});\\n        }\\n\\n        return routes;\\n    }\\n\\n    function getRandomNumber(bytes memory seed, uint256 maxValue) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(seed))) % maxValue;\\n    }\\n\\n    function getCost(uint8 name) public view returns (Ships.TokenHarvest[] memory) {\\n        return nameToCost[name];\\n    }\\n\\n    // We'll disable trading route updates for now until the mechanics are clearer\\n    // It's only valid on initialisation\\n    function isValidRoute(\\n        Ships.Path[] memory route,\\n        uint256 tokenId,\\n        address sender,\\n        bool init\\n    ) public view returns (bool) {\\n        return init;\\n    }\\n\\n    function getImageOutput(Ships.Ship memory shipInfo) public view returns (string memory) {\\n        string memory imageOutput = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.txt { fill: black; font-family: monospace; font-size: 12px;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"white\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"txt\\\">',\\n                shipInfo.name,\\n                '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"txt\\\">',\\n                shipInfo.expedition,\\n                '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"txt\\\">',\\n                string(abi.encodePacked(Strings.toString(uint256(shipInfo.length)), \\\" ft\\\")),\\n                '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"txt\\\">',\\n                string(abi.encodePacked(Strings.toString(uint256(shipInfo.speed)), \\\" km/h\\\")),\\n                '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"txt\\\">'\\n            )\\n        );\\n\\n        string memory routeStr = \\\"\\\";\\n        for (uint256 i = 0; i < shipInfo.route.length; i++) {\\n            string memory symbol = shipInfo.route[i].tokenContract == address(settlementsContract)\\n                ? \\\"S\\\"\\n                : \\\"I\\\";\\n\\n            string memory suffix = i == shipInfo.route.length - 1 ? \\\"\\\" : \\\",\\\";\\n\\n            routeStr = string(\\n                abi.encodePacked(\\n                    routeStr,\\n                    \\\" \\\",\\n                    symbol,\\n                    Strings.toString(shipInfo.route[i].tokenId),\\n                    suffix\\n                )\\n            );\\n        }\\n\\n        Status shipStatus = getStatus(shipInfo.tokenId);\\n        Ships.Path memory currentTarget = getCurrentTarget(shipInfo.tokenId);\\n\\n        Ships.TokenHarvest[] memory unharvestedTokens = getUnharvestedTokens(shipInfo.tokenId);\\n        string memory unharvestedTokenStr = \\\"\\\";\\n        for (uint256 i = 0; i < unharvestedTokens.length; i++) {\\n            // TODO: go to new line every 3 resources\\n            string memory suffix = i == unharvestedTokens.length - 1 ? \\\"\\\" : \\\", \\\";\\n            unharvestedTokenStr = string(\\n                abi.encodePacked(\\n                    unharvestedTokenStr,\\n                    Strings.toString(unharvestedTokens[i].amount / ONE),\\n                    \\\" $\\\",\\n                    ERC20Mintable(unharvestedTokens[i].resourceTokenContract).symbol(),\\n                    suffix\\n                )\\n            );\\n        }\\n\\n        imageOutput = string(\\n            abi.encodePacked(\\n                imageOutput,\\n                \\\"------------\\\",\\n                '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"txt\\\">',\\n                \\\"Status: \\\",\\n                shipStatus == Status.Harvesting ? \\\"Harvesting \\\" : shipStatus == Status.Resting\\n                    ? \\\"Resting at \\\"\\n                    : \\\"Sailing to \\\",\\n                currentTarget.tokenContract == address(settlementsContract) ? \\\"S\\\" : \\\"I\\\",\\n                Strings.toString(currentTarget.tokenId),\\n                '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"txt\\\">',\\n                abi.encodePacked(\\n                    \\\"ETA: \\\",\\n                    Strings.toString(getBlocksUntilNextPhase(shipInfo.tokenId)),\\n                    \\\" blocks\\\"\\n                ),\\n                '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"txt\\\">',\\n                \\\"Route: \\\",\\n                routeStr,\\n                '</text><text x=\\\"10\\\" y=\\\"180\\\" class=\\\"txt\\\">',\\n                \\\"------------\\\",\\n                '</text><text x=\\\"10\\\" y=\\\"200\\\" class=\\\"txt\\\">'\\n            )\\n        );\\n\\n        imageOutput = string(abi.encodePacked(imageOutput, unharvestedTokenStr, \\\"</text></svg>\\\"));\\n\\n        return imageOutput;\\n    }\\n\\n    function getAttrOutput(Ships.Ship memory shipInfo) public view returns (string memory) {\\n        string memory routeStr = \\\"\\\";\\n        for (uint256 i = 0; i < shipInfo.route.length; i++) {\\n            string memory symbol = shipInfo.route[i].tokenContract == address(settlementsContract)\\n                ? \\\"S\\\"\\n                : \\\"I\\\";\\n\\n            string memory suffix = i == shipInfo.route.length - 1 ? \\\"\\\" : \\\",\\\";\\n\\n            routeStr = string(\\n                abi.encodePacked(\\n                    routeStr,\\n                    '\\\"',\\n                    symbol,\\n                    Strings.toString(shipInfo.route[i].tokenId),\\n                    '\\\"',\\n                    suffix\\n                )\\n            );\\n        }\\n\\n        string memory attrOutput = string(\\n            abi.encodePacked(\\n                '[{ \\\"trait_type\\\": \\\"Name\\\", \\\"value\\\": \\\"',\\n                shipInfo.name,\\n                '\\\" }, { \\\"trait_type\\\": \\\"Expedition\\\", \\\"value\\\": \\\"',\\n                shipInfo.expedition,\\n                '\\\" }, { \\\"trait_type\\\": \\\"Length (ft)\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(uint256(shipInfo.length)),\\n                ' }, { \\\"trait_type\\\": \\\"Speed (km/h)\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ',\\n                Strings.toString(uint256(shipInfo.speed)),\\n                ' }, { \\\"trait_type\\\": \\\"Trade Route\\\", \\\"value\\\": [',\\n                routeStr,\\n                \\\"]\\\"\\n            )\\n        );\\n\\n        attrOutput = string(abi.encodePacked(attrOutput, \\\" }]\\\"));\\n\\n        return attrOutput;\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        Ships.Ship memory shipInfo = shipsContract.getShipInfo(tokenId);\\n\\n        string memory imageOutput = getImageOutput(shipInfo);\\n        string memory attrOutput = getAttrOutput(shipInfo);\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Ship #',\\n                        Strings.toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"Ships can sail around the Settlements world to trade, discover and attack. All data is onchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(imageOutput)),\\n                        '\\\", \\\"attributes\\\": ',\\n                        attrOutput,\\n                        \\\"}\\\"\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n}\\n\",\"keccak256\":\"0x116318b5450d238042eda8935c23d23780fc67661a4406beaed93590b34583fd\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c8063685699ac1161013b578063a0712d68116100b8578063c87b56dd1161007c578063c87b56dd14610684578063d03cea6d14610697578063ddc63262146106aa578063e985e9c5146106bd578063f2fde38b146106f957600080fd5b8063a0712d6814610625578063a22cb46514610638578063a5dc9e1b1461064b578063b88d4fde1461065e578063c5639cc61461067157600080fd5b80638c1d808c116100ff5780638c1d808c146105d35780638da5cb5b146105e657806395d89b41146105f7578063965eb54a146105ff5780639bb8e4c41461061257600080fd5b8063685699ac1461054657806370a0823114610566578063715018a6146105795780637ae349d0146105815780637d7f7840146105b357600080fd5b80632f745c59116101c95780634622ab031161018d5780634622ab03146104305780634f6ccce714610443578063521e8749146104565780635a1e0d24146105205780636352211e1461053357600080fd5b80632f745c59146103af578063367668d4146103c25780633f6fc50b146103e257806342842e0e146103f557806343e4abbd1461040857600080fd5b80631177f379116102105780631177f379146102f857806314a327501461036e578063151895551461038157806318160ddd1461039457806323b872dd1461039c57600080fd5b806301ffc9a71461024d578063038053e21461027557806306fdde03146102a3578063081812fc146102b8578063095ea7b3146102e3575b600080fd5b61026061025b366004612ef0565b61070c565b60405190151581526020015b60405180910390f35b610295610283366004612fde565b60136020526000908152604090205481565b60405190815260200161026c565b6102ab61071d565b60405161026c91906131ce565b6102cb6102c6366004612fde565b6107af565b6040516001600160a01b03909116815260200161026c565b6102f66102f1366004612cb9565b610849565b005b61033d610306366004612fde565b60116020526000908152604090205460ff8082169161010081049091169063ffffffff620100008204811691600160301b90041684565b6040805160ff958616815294909316602085015263ffffffff9182169284019290925216606082015260800161026c565b6102ab61037c366004612fde565b61095f565b61029561038f366004612fde565b610a0b565b600854610295565b6102f66103aa366004612be2565b610a9f565b6102956103bd366004612cb9565b610ad0565b6103d56103d0366004612fde565b610b66565b60405161026c91906132b9565b6102f66103f0366004613053565b610ea5565b6102f6610403366004612be2565b61103e565b61041b610416366004612fde565b611059565b60405163ffffffff909116815260200161026c565b6102ab61043e366004612fde565b611093565b610295610451366004612fde565b6110a3565b6104d6610464366004612fde565b604080516080808201835260008083526020808401829052838501829052606093840182905294815260118552839020835191820184525460ff80821683526101008204169482019490945263ffffffff620100008504811693820193909352600160301b9093049091169082015290565b60405161026c9190600060808201905060ff835116825260ff6020840151166020830152604083015163ffffffff8082166040850152806060860151166060850152505092915050565b6102f661052e36600461300e565b611144565b6102cb610541366004612fde565b6113e7565b610295610554366004612fde565b60146020526000908152604090205481565b610295610574366004612b72565b61145e565b6102f66114e5565b61059461058f366004613032565b61151b565b604080516001600160a01b03909316835260208301919091520161026c565b6105c66105c1366004612fde565b611561565b60405161026c919061316e565b6102956105e1366004612f28565b6115e2565b600a546001600160a01b03166102cb565b6102ab611619565b61041b61060d366004612fde565b611628565b6102f6610620366004612d80565b611638565b6102f6610633366004612fde565b611644565b6102f6610646366004612c8c565b611789565b600f546102cb906001600160a01b031681565b6102f661066c366004612c22565b61184e565b6102f661067f366004612b72565b611886565b6102ab610692366004612fde565b6118d2565b6010546102cb906001600160a01b031681565b6102f66106b8366004612fde565b611953565b6102606106cb366004612baa565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102f6610707366004612b72565b611b93565b600061071782611c2e565b92915050565b60606000805461072c906134bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610758906134bb565b80156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661082d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610854826113e7565b9050806001600160a01b0316836001600160a01b031614156108c25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610824565b336001600160a01b03821614806108de57506108de81336106cb565b6109505760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610824565b61095a8383611c53565b505050565b600c818154811061096f57600080fd5b90600052602060002001600091509050805461098a906134bb565b80601f01602080910402602001604051908101604052809291908181526020018280546109b6906134bb565b8015610a035780601f106109d857610100808354040283529160200191610a03565b820191906000526020600020905b8154815290600101906020018083116109e657829003601f168201915b505050505081565b600080610a1783610b66565b600f5460405163524eaa7b60e11b81529192506001600160a01b03169063a49d54f690610a489084906004016132b9565b60206040518083038186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a989190612ff6565b9392505050565b610aa93382611cc1565b610ac55760405162461bcd60e51b815260040161082490613268565b61095a838383611db8565b6000610adb8361145e565b8210610b3d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610824565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610bab6040518060c00160405280600081526020016060815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001606081525090565b6000828152600260205260409020546001600160a01b0316610c1b5760405162461bcd60e51b8152602060048201526024808201527f536869702077697468207468617420746f6b656e496420646f65736e277420656044820152631e1a5cdd60e21b6064820152608401610824565b6000828152601160209081526040918290208251608081018452905460ff8082168352610100820481168385015263ffffffff620100008304811684870152600160301b9092049091166060830152835160c081019094528584528151600b8054939594850193909291909116908110610ca557634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610cba906134bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce6906134bb565b8015610d335780601f10610d0857610100808354040283529160200191610d33565b820191906000526020600020905b815481529060010190602001808311610d1657829003601f168201915b50505050508152602001600c836020015160ff1681548110610d6557634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610d7a906134bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610da6906134bb565b8015610df35780601f10610dc857610100808354040283529160200191610df3565b820191906000526020600020905b815481529060010190602001808311610dd657829003601f168201915b50505050508152602001826040015163ffffffff168152602001826060015163ffffffff16815260200160126000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e98576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610e50565b5050509152509392505050565b600f54604051631baf95cb60e11b815260ff831660048201526000916001600160a01b03169063375f2b969060240160006040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f289190810190612e44565b905060005b815181101561101357818181518110610f5657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03166379cc679033848481518110610f9157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518363ffffffff1660e01b8152600401610fce9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b50505050808061100b906134f6565b915050610f2d565b5060016015600082825461102791906133e2565b9250508190555061103a82601554611f63565b5050565b61095a8383836040518060200160405280600081525061184e565b600e818154811061106957600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b600b818154811061096f57600080fd5b60006110ae60085490565b82106111115760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610824565b6008828154811061113257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600061114f83611561565b600f54604051632771008160e11b8152600481018690529192506000916001600160a01b0390911690634ee201029060240160206040518083038186803b15801561119957600080fd5b505afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612b8e565b905060005b82518110156113e0578281815181106111ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316846001600160a01b031614611228576113ce565b82818151811061124857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03166340c10f1961126b876113e7565b85848151811061128b57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518363ffffffff1660e01b81526004016112c89291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b1580156112e257600080fd5b505af11580156112f6573d6000803e3d6000fd5b505060105485516001600160a01b0390911692506340c10f199150849060649087908690811061133657634e487b7160e01b600052603260045260246000fd5b602002602001015160200151600661134e9190613459565b6113589190613422565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b5050506000958652505060136020525050604090912043905550565b806113d8816134f6565b9150506111d6565b5050505050565b6000818152600260205260408120546001600160a01b0316806107175760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610824565b60006001600160a01b0382166114c95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610824565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b0316331461150f5760405162461bcd60e51b815260040161082490613233565b6115196000612301565b565b6012602052816000526040600020818154811061153757600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b600f546040516301f5fde160e61b8152600481018390526060916001600160a01b031690637d7f78409060240160006040518083038186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107179190810190612e44565b600081836040516020016115f691906131ce565b6040516020818303038152906040528051906020012060001c610a989190613511565b60606001805461072c906134bb565b600d818154811061106957600080fd5b61103a82826000612353565b6000818152600260205260409020546001600160a01b0316156116a95760405162461bcd60e51b815260206004820181905260248201527f536869702077697468207468617420696420616c7265616479206578697374736044820152606401610824565b610bb88111156116f05760405162461bcd60e51b815260206004820152601260248201527114da1a5c081a59081a5cc81a5b9d985b1a5960721b6044820152606401610824565b6000611741824260405160200161172a929190918252606060208301819052600190830152603760f91b6080830152604082015260a00190565b6040516020818303038152906040526103e86115e2565b905060006103848210611772576103b6821061176757611762600583613511565b61177d565b611762600483613511565b61177d600383613511565b905061095a8184611f63565b6001600160a01b0382163314156117e25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610824565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6118583383611cc1565b6118745760405162461bcd60e51b815260040161082490613268565b611880848484846124d9565b50505050565b600a546001600160a01b031633146118b05760405162461bcd60e51b815260040161082490613233565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600f5460405163c87b56dd60e01b8152600481018390526060916001600160a01b03169063c87b56dd9060240160006040518083038186803b15801561191757600080fd5b505afa15801561192b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107179190810190612f6b565b600061195e82611561565b600f54604051632771008160e11b8152600481018590529192506000916001600160a01b0390911690634ee201029060240160206040518083038186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e09190612b8e565b905060005b825181101561188057828181518110611a0e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03166340c10f19611a31866113e7565b858481518110611a5157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518363ffffffff1660e01b8152600401611a8e9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505060105485516001600160a01b0390911692506340c10f1991508490600a90879086908110611afc57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611b129190613422565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611b5857600080fd5b505af1158015611b6c573d6000803e3d6000fd5b50505060008581526013602052604090204390555080611b8b816134f6565b9150506119e5565b600a546001600160a01b03163314611bbd5760405162461bcd60e51b815260040161082490613233565b6001600160a01b038116611c225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610824565b611c2b81612301565b50565b60006001600160e01b0319821663780e9d6360e01b148061071757506107178261250c565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c88826113e7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611d3a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610824565b6000611d45836113e7565b9050806001600160a01b0316846001600160a01b03161480611d805750836001600160a01b0316611d75846107af565b6001600160a01b0316145b80611db057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611dcb826113e7565b6001600160a01b031614611e335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610824565b6001600160a01b038216611e955760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610824565b611ea083838361255c565b611eab600082611c53565b6001600160a01b0383166000908152600360205260408120805460019290611ed4908490613478565b90915550506001600160a01b0382166000908152600360205260408120805460019290611f029084906133e2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60408051608081018252600080825260208201819052918101829052606081019190915260ff83168152604051600090611fc99061172a9085904290602001918252606060208301819052600190830152606360f81b6080830152604082015260a00190565b9050611fd6600582613511565b60ff1660208381019190915260408051918201859052606090820181905260016080830152601b60fa1b60a083015242908201526120279060c00160405160208183030381529060405260326115e2565b9050600a600e836000015160ff168154811061205357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff166120828360016133e2565b61208c9190613459565b6120969190613436565b6120a19060026133fa565b63ffffffff16604083018190526005116120bf5781604001516120c2565b60055b63ffffffff166040808401919091525161211e906121089085904290602001918252606060208301819052600190830152607360f81b6080830152604082015260a00190565b60405160208183030381529060405260646115e2565b90506064600d836000015160ff168154811061214a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff166121798360016133e2565b6121839190613459565b61218d9190613436565b6121989060026133fa565b63ffffffff16606083018190526005116121b65781606001516121b9565b60055b63ffffffff9081166060840190815260008581526011602090815260409182902086518154928801518489015195518716600160301b0269ffffffff000000000000199690971662010000029590951669ffffffffffffffff00001960ff9687166101000261ffff199095169683169690961793909317949094169190911793909317909255600f5491516318f90b5d60e21b81526122d8926001600160a01b0316916363e42d749161227c91889160040191825260ff16602082015260400190565b60006040518083038186803b15801561229457600080fd5b505afa1580156122a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122d09190810190612ce4565b846001612353565b600083815260146020908152604080832043908190556013909252909120556118803384612567565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600f5460405163a290d5ff60e01b81526001600160a01b039091169063a290d5ff90612389908690869033908790600401613134565b60206040518083038186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190612ed4565b6124155760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726f75746560981b6044820152606401610824565b600082815260126020526040812061242c91612a81565b60005b83518110156124c3576000838152601260205260409020845185908390811061246857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151910155806124bb816134f6565b91505061242f565b5050600090815260136020526040902043905550565b6124e4848484611db8565b6124f084848484612581565b6118805760405162461bcd60e51b8152600401610824906131e1565b60006001600160e01b031982166380ac58cd60e01b148061253d57506001600160e01b03198216635b5e139f60e01b145b8061071757506301ffc9a760e01b6001600160e01b0319831614610717565b61095a83838361268e565b61103a828260405180602001604052806000815250612746565b60006001600160a01b0384163b1561268357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125c59033908990889088906004016130f7565b602060405180830381600087803b1580156125df57600080fd5b505af192505050801561260f575060408051601f3d908101601f1916820190925261260c91810190612f0c565b60015b612669573d80801561263d576040519150601f19603f3d011682016040523d82523d6000602084013e612642565b606091505b5080516126615760405162461bcd60e51b8152600401610824906131e1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611db0565b506001949350505050565b6001600160a01b0383166126e9576126e481600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61270c565b816001600160a01b0316836001600160a01b03161461270c5761270c8382612779565b6001600160a01b0382166127235761095a81612816565b826001600160a01b0316826001600160a01b03161461095a5761095a82826128ef565b6127508383612933565b61275d6000848484612581565b61095a5760405162461bcd60e51b8152600401610824906131e1565b600060016127868461145e565b6127909190613478565b6000838152600760205260409020549091508082146127e3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061282890600190613478565b6000838152600960205260408120546008805493945090928490811061285e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061288d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806128d357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006128fa8361145e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166129895760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610824565b6000818152600260205260409020546001600160a01b0316156129ee5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610824565b6129fa6000838361255c565b6001600160a01b0382166000908152600360205260408120805460019290612a239084906133e2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5080546000825560020290600052602060002090810190611c2b91905b80821115612ac35780546001600160a01b031916815560006001820155600201612a9e565b5090565b600082601f830112612ad7578081fd5b8135612aea612ae5826133ba565b613365565b818152846020838601011115612afe578283fd5b816020850160208301379081016020019190915292915050565b600060408284031215612b29578081fd5b6040516040810181811067ffffffffffffffff82111715612b4c57612b4c613551565b80604052508091508251612b5f81613567565b8152602092830151920191909152919050565b600060208284031215612b83578081fd5b8135610a9881613567565b600060208284031215612b9f578081fd5b8151610a9881613567565b60008060408385031215612bbc578081fd5b8235612bc781613567565b91506020830135612bd781613567565b809150509250929050565b600080600060608486031215612bf6578081fd5b8335612c0181613567565b92506020840135612c1181613567565b929592945050506040919091013590565b60008060008060808587031215612c37578182fd5b8435612c4281613567565b93506020850135612c5281613567565b925060408501359150606085013567ffffffffffffffff811115612c74578182fd5b612c8087828801612ac7565b91505092959194509250565b60008060408385031215612c9e578182fd5b8235612ca981613567565b91506020830135612bd78161357c565b60008060408385031215612ccb578182fd5b8235612cd681613567565b946020939093013593505050565b60006020808385031215612cf6578182fd5b825167ffffffffffffffff811115612d0c578283fd5b8301601f81018513612d1c578283fd5b8051612d2a612ae582613396565b80828252848201915084840188868560061b8701011115612d49578687fd5b8694505b83851015612d7457612d5f8982612b18565b83526001949094019391850191604001612d4d565b50979650505050505050565b6000806040808486031215612d93578283fd5b833567ffffffffffffffff811115612da9578384fd5b8401601f81018613612db9578384fd5b80356020612dc9612ae583613396565b8083825282820191508285018a848660061b8801011115612de8578889fd5b8895505b84861015612e335786818c031215612e02578889fd5b612e0a61333c565b8135612e1581613567565b81528185013585820152835260019590950194918301918601612dec565b509997909101359750505050505050565b60006020808385031215612e56578182fd5b825167ffffffffffffffff811115612e6c578283fd5b8301601f81018513612e7c578283fd5b8051612e8a612ae582613396565b80828252848201915084840188868560061b8701011115612ea9578687fd5b8694505b83851015612d7457612ebf8982612b18565b83526001949094019391850191604001612ead565b600060208284031215612ee5578081fd5b8151610a988161357c565b600060208284031215612f01578081fd5b8135610a988161358a565b600060208284031215612f1d578081fd5b8151610a988161358a565b60008060408385031215612f3a578182fd5b823567ffffffffffffffff811115612f50578283fd5b612f5c85828601612ac7565b95602094909401359450505050565b600060208284031215612f7c578081fd5b815167ffffffffffffffff811115612f92578182fd5b8201601f81018413612fa2578182fd5b8051612fb0612ae5826133ba565b818152856020838501011115612fc4578384fd5b612fd582602083016020860161348f565b95945050505050565b600060208284031215612fef578081fd5b5035919050565b600060208284031215613007578081fd5b5051919050565b60008060408385031215613020578182fd5b823591506020830135612bd781613567565b60008060408385031215613044578182fd5b50508035926020909101359150565b600060208284031215613064578081fd5b813560ff81168114610a98578182fd5b6000815180845260208085019450808401835b838110156130c0576130ad87835180516001600160a01b03168252602090810151910152565b6040969096019590820190600101613087565b509495945050505050565b600081518084526130e381602086016020860161348f565b601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061312a908301846130cb565b9695505050505050565b6080815260006131476080830187613074565b6020830195909552506001600160a01b039290921660408301521515606090910152919050565b602080825282518282018190526000919060409081850190868401855b828110156131c1576131b184835180516001600160a01b03168252602090810151910152565b928401929085019060010161318b565b5091979650505050505050565b602081526000610a9860208301846130cb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208152815160208201526000602083015160c060408401526132df60e08401826130cb565b90506040840151601f19808584030160608601526132fd83836130cb565b92506060860151915063ffffffff80831660808701528060808801511660a08701525060a08601519150808584030160c086015250612fd58282613074565b6040805190810167ffffffffffffffff8111828210171561335f5761335f613551565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561338e5761338e613551565b604052919050565b600067ffffffffffffffff8211156133b0576133b0613551565b5060051b60200190565b600067ffffffffffffffff8211156133d4576133d4613551565b50601f01601f191660200190565b600082198211156133f5576133f5613525565b500190565b600063ffffffff80831681851680830382111561341957613419613525565b01949350505050565b6000826134315761343161353b565b500490565b600063ffffffff8084168061344d5761344d61353b565b92169190910492915050565b600081600019048311821515161561347357613473613525565b500290565b60008282101561348a5761348a613525565b500390565b60005b838110156134aa578181015183820152602001613492565b838111156118805750506000910152565b600181811c908216806134cf57607f821691505b602082108114156134f057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561350a5761350a613525565b5060010190565b6000826135205761352061353b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c2b57600080fd5b8015158114611c2b57600080fd5b6001600160e01b031981168114611c2b57600080fdfea2646970667358221220319c08cbf33d2a5570ea154197a0a1aba096be6c6e6ee150817c50c04c58a1dd64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getShipInfo(uint256)": {
        "notice": "Getters "
      },
      "mint(uint256)": {
        "notice": "State modifications "
      },
      "setHelperContract(address)": {
        "notice": "Setters "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1644,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1646,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1650,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1654,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1658,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1664,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2613,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2617,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2620,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2624,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Ships.sol:Ships",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8168,
        "contract": "contracts/Ships.sol:Ships",
        "label": "names",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 8177,
        "contract": "contracts/Ships.sol:Ships",
        "label": "expeditions",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 8186,
        "contract": "contracts/Ships.sol:Ships",
        "label": "speedMultipliers",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 8195,
        "contract": "contracts/Ships.sol:Ships",
        "label": "lengthMultipliers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 8198,
        "contract": "contracts/Ships.sol:Ships",
        "label": "helperContract",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(ShipsHelper)10406"
      },
      {
        "astId": 8201,
        "contract": "contracts/Ships.sol:Ships",
        "label": "goldTokenContract",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ERC20Mintable)4115"
      },
      {
        "astId": 8206,
        "contract": "contracts/Ships.sol:Ships",
        "label": "tokenIdToAttributes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Attributes)8134_storage)"
      },
      {
        "astId": 8212,
        "contract": "contracts/Ships.sol:Ships",
        "label": "tokenIdToRoute",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_struct(Path)8139_storage)dyn_storage)"
      },
      {
        "astId": 8216,
        "contract": "contracts/Ships.sol:Ships",
        "label": "tokenIdToLastRouteUpdate",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8220,
        "contract": "contracts/Ships.sol:Ships",
        "label": "tokenIdToLastSetlHarvest",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8223,
        "contract": "contracts/Ships.sol:Ships",
        "label": "purchasedShipsCount",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Path)8139_storage)dyn_storage": {
        "base": "t_struct(Path)8139_storage",
        "encoding": "dynamic_array",
        "label": "struct Ships.Path[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20Mintable)4115": {
        "encoding": "inplace",
        "label": "contract ERC20Mintable",
        "numberOfBytes": "20"
      },
      "t_contract(ShipsHelper)10406": {
        "encoding": "inplace",
        "label": "contract ShipsHelper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Path)8139_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ships.Path[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Path)8139_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Attributes)8134_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ships.Attributes)",
        "numberOfBytes": "32",
        "value": "t_struct(Attributes)8134_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attributes)8134_storage": {
        "encoding": "inplace",
        "label": "struct Ships.Attributes",
        "members": [
          {
            "astId": 8127,
            "contract": "contracts/Ships.sol:Ships",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8129,
            "contract": "contracts/Ships.sol:Ships",
            "label": "expedition",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8131,
            "contract": "contracts/Ships.sol:Ships",
            "label": "length",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8133,
            "contract": "contracts/Ships.sol:Ships",
            "label": "speed",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Path)8139_storage": {
        "encoding": "inplace",
        "label": "struct Ships.Path",
        "members": [
          {
            "astId": 8136,
            "contract": "contracts/Ships.sol:Ships",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8138,
            "contract": "contracts/Ships.sol:Ships",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}